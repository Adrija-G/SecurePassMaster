import re
import random
import time
from sklearn.ensemble import IsolationForest

def vigenere_encrypt(plaintext, key):
    encrypted_text = ""
    key_length = len(key)
    
    for i in range(len(plaintext)):
        shift = ord(key[i % key_length]) - ord('a')
        encrypted_char = chr((ord(plaintext[i]) + shift) % 128)
        encrypted_text += encrypted_char
    
    return encrypted_text

def password_checker(password):
    if len(password) < 6:
        return "Password is too short."
    elif len(password) > 20:
        return "Password is too long."
    elif not re.search(r"[a-z]", password):
        return "Password must contain at least one lowercase letter."
    elif not re.search(r"[0-9]", password):
        return "Password must contain at least one numerical value."
    elif not re.search(r"[A-Z]", password):
        return "Password must contain at least one uppercase letter."
    elif not re.search(r"[!@#$%^&*|\;':/,.?<>]", password):
        return "Password must contain at least one special character."
    else:
        return "Valid Password"

def password_generator():
    max_len = 20
    nums = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9']
    lwcase = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h',
              'i', 'j', 'k', 'm', 'n', 'o', 'p', 'q',
              'r', 's', 't', 'u', 'v', 'w', 'x', 'y',
              'z']
    upcase = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H',
              'I', 'J', 'K', 'M', 'N', 'O', 'P', 'Q',
              'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y',
              'Z']
    spchars = ['@', '#', '$', '%', '=', ':', '?', '.', '/',
               '|', '~', '>', '*', '(', ')', '<']

    full_list = nums + upcase + lwcase + spchars
    rand_digit = random.choice(nums)
    rand_upper = random.choice(upcase)
    rand_lower = random.choice(lwcase)
    rand_symbol = random.choice(spchars)

    temp_pass = rand_digit + rand_upper + rand_lower + rand_symbol

    for _ in range(max_len - 4):
        temp_pass += random.choice(full_list)

    password = "".join(random.sample(temp_pass, len(temp_pass)))
    return password

generated_password = password_generator()

def detect_anomalies(passwords):
    isolation_forest = IsolationForest(contamination=0.5, random_state=42)
    X = [[len(password)] for password in passwords]
    isolation_forest.fit(X)
    anomalies = isolation_forest.predict(X)
    return anomalies

attempts = 0
user_password = None
c = ""

while attempts < 5:
    user_password = input("Enter your password: ")
    result = password_checker(user_password)

    # Detect anomalies
    anomalies = detect_anomalies([user_password])

    if anomalies[0] == -1:
        print("Unusual password detected. Please choose another.")
        continue

    print("Evaluating password...")
    time.sleep(3)

    if result == "Valid Password":
        print("Password accepted:", user_password)
        break
    else:
        print(result)
        attempts += 1
        time.sleep(0.5)
        print("Attempts remaining:", 5 - attempts)

if attempts == 5 and user_password is not None:
    print("Exceeded maximum attempts. Generating a random password...")
    time.sleep(4)
    print("Generated Password:", generated_password)
    time.sleep(2)
    c = input("Keep as password? Yes (y) or no (n)? ")
    if c.lower() == "y":
        print("Your password is:", generated_password[0], "*" * (len(generated_password) - 1), "\nDo not share this with anybody.")
    else:
        result = password_checker(generated_password)
    
    
# Ask user for an encryption key
encryption_key = input("Enter an encryption key (a word): ").lower()

# Encrypt the generated password using VigenÃ¨re cipher
encrypted_password = vigenere_encrypt(generated_password, encryption_key)

print("Encrypted Password:", encrypted_password)
print("Do not share this with anybody.")


